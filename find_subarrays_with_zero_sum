def find_subarrays_with_zero_sum(arr):
    # Dictionary to store prefix sums and their corresponding indices
    prefix_sum_map = {}
    # List to store the results (pairs of starting and ending indices)
    result = []
    # Initialize the running sum (prefix sum)
    current_sum = 0

    # Iterate over the array
    for i in range(len(arr)):
        current_sum += arr[i]

        # If the running sum is zero, subarray from 0 to i has sum zero
        if current_sum == 0:
            result.append((0, i))

        # If current_sum is already in prefix_sum_map, subarrays from previous
        # occurrences to current index have sum zero
        if current_sum in prefix_sum_map:
            # All indices where this sum has been seen before
            for start_index in prefix_sum_map[current_sum]:
                result.append((start_index + 1, i))

        # Add the current index to the list of indices for current_sum
        if current_sum not in prefix_sum_map:
            prefix_sum_map[current_sum] = []
        prefix_sum_map[current_sum].append(i)

    return result
